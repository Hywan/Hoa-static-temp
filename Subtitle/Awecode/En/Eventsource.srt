1
00:00:13,688 --> 00:00:16,919
Today awecode's suject: <i>Hoa\Eventsource</i>.

2
00:00:16,919 --> 00:00:21,884
EventSource, also called <i>Server-Sent Events</i>, is a standardized technology by the W3C.

3
00:00:21,884 --> 00:00:25,225
It allows to a HTTP server to send events to a client.

4
00:00:25,225 --> 00:00:28,394
We will see an example and we will explain at the same time.

5
00:00:28,394 --> 00:00:31,820
We will start our client with the <i>index.html</i> file

6
00:00:31,820 --> 00:00:34,587
that will contain a <i>pre</i> and a <i>script</i>.

7
00:00:34,587 --> 00:00:37,825
Our ouputs will be printed in the <i>pre</i>.

8
00:00:37,825 --> 00:00:44,006
In the <i>script</i>, we will select the <i>output</i>, and we will declare a new source of events.

9
00:00:44,006 --> 00:00:47,106
This source is called <i>Server.php</i>.

10
00:00:47,106 --> 00:00:54,741
Next, each time we receive a <i>tick</i> event, we print its datum

11
00:00:54,741 --> 00:00:59,999
in the <i>output</i>. Simple as that.

12
00:00:59,999 --> 00:01:05,657
Next step: we will create our <i>Server.php</i> server.

13
00:01:05,657 --> 00:01:12,085
It is based on the <i>Hoa\Eventsource\Server</i> class.

14
00:01:12,085 --> 00:01:14,315
We start an infinite loop.

15
00:01:14,315 --> 00:01:21,799
We get the <i>tick</i> event, and we send the time, every second.

16
00:01:21,799 --> 00:01:29,081
Demonstration: I am in the client and I see, every second, the time coming.

17
00:01:29,081 --> 00:01:33,289
Those data are sent by the server.

18
00:01:33,289 --> 00:01:35,739
This, it is quite new.

19
00:01:35,739 --> 00:01:39,657
Before, the client had to ask to the server if there was an event for him.

20
00:01:39,657 --> 00:01:43,077
For example: “Do I have a new message?”, this kind of things.

21
00:01:43,077 --> 00:01:45,700
While now, the server will tell the client.

22
00:01:45,700 --> 00:01:47,300
It is in the opposite direction.

23
00:01:47,300 --> 00:01:50,500
We save a lot of resources and also complexity.

24
00:01:50,500 --> 00:01:53,771
For example, the server is even able to tell the client:

25
00:01:53,771 --> 00:01:56,987
“reconnect in 1h, I will have new events for you”.

26
00:01:56,987 --> 00:02:01,905
This kind of things is really convenient when we have long usages of Web applications,

27
00:02:01,905 --> 00:02:04,894
such as video games.

28
00:02:04,894 --> 00:02:06,661
Now we have illustrated a little bit the concept,

29
00:02:06,661 --> 00:02:09,136
we will start a funnier example.

30
00:02:09,136 --> 00:02:13,918
We will mix with <i>Hoa\File\Watcher</i> that allows to listen the filesystem.

31
00:02:13,918 --> 00:02:18,912
So, we will totally rewrite <i>Server.php</i>.

32
00:02:22,912 --> 00:02:26,051
We will use, then, <i>Hoa\File\Watcher</i>.

33
00:02:26,051 --> 00:02:31,327
We say to the watcher to use the current directory and listen the CSS files.

34
00:02:31,327 --> 00:02:39,924
Each time a CSS file is modified, it will send an event to the client

35
00:02:39,924 --> 00:02:44,155
saying: “this file has been modified”.

36
00:02:44,155 --> 00:02:47,983
We will also rewrite our client: the <i>index.html</i> file.

37
00:02:47,983 --> 00:02:54,522
All we will do is to add a link, a title and a tiny paragraph.

38
00:02:54,522 --> 00:03:01,184
Next, we write a little bit of Javascript to refresh the CSS stylesheets.

39
00:03:01,184 --> 00:03:04,612
We use a naive tip, very triviale.

40
00:03:04,612 --> 00:03:08,030
We declare a new source of events: still <i>Server.php</i>.

41
00:03:08,030 --> 00:03:11,394
This time, we no longer listen the <i>tick</i> event, but <i>modify</i>.

42
00:03:11,394 --> 00:03:17,857
Next, a little bit of code to refresh the CSS stylesheets:

43
00:03:17,857 --> 00:03:20,961
we force the browser to refresh them.

44
00:03:20,961 --> 00:03:24,170
Now, we will write some CSS!

45
00:03:24,170 --> 00:03:29,589
I refresh my browser. I see my title and my paragraph.

46
00:03:29,589 --> 00:03:36,784
I will edit the CSS stylesheets. For example, in the <i>body</i>, I change the color of the text.

47
00:03:36,784 --> 00:03:38,223
I save.

48
00:03:38,223 --> 00:03:42,116
When I save, <i>Hoa\File\Watcher</i> detects that a CSS file has been modfied,

49
00:03:42,116 --> 00:03:47,750
so an event is sent from <i>Hoa\Eventsource\Server</i> to the client,

50
00:03:47,750 --> 00:03:52,031
the client receives this event and tells the browser: “refresh the CSS stylesheets”,

51
00:03:52,031 --> 00:03:55,885
and we see the result in the browser.

52
00:03:55,885 --> 00:03:59,111
We continue by modifying the background color.

53
00:03:59,111 --> 00:04:02,660
I don't really like this color… we would like a darker one…

54
00:04:02,660 --> 00:04:06,118
even darker… <i>voilà</i>!

55
00:04:06,118 --> 00:04:09,159
Again, for the title: we would like to see it centered,

56
00:04:09,159 --> 00:04:17,526
we also would like to see a shadow, of 10px for example.

57
00:04:17,526 --> 00:04:21,473
We will use a color, almost by instinct.

58
00:04:21,473 --> 00:04:26,767
Next, we will style our text.

59
00:04:26,767 --> 00:04:32,048
This is a box, we will add a border.

60
00:04:32,048 --> 00:04:34,743
The border appears.

61
00:04:34,743 --> 00:04:39,716
We will add a top margin, it changes.

62
00:04:39,716 --> 00:04:42,591
We will add a little padding,

63
00:04:42,591 --> 00:04:45,863
everything is ok.

64
00:04:45,863 --> 00:04:48,819
Now, we set a top margin for the title, etc.

65
00:04:48,819 --> 00:04:52,050
This is very useful for realtime edition,

66
00:04:52,050 --> 00:04:54,454
but this <b>one</b> usage among others!

67
00:04:54,454 --> 00:04:56,313
This is really a demonstration.

68
00:04:56,313 --> 00:04:58,310
So, we have understood the principle:

69
00:04:58,310 --> 00:05:01,557
we have CSS stylesheets, when they are modified, an event is sent to the client,

70
00:05:01,557 --> 00:05:03,720
the client is refreshing itself.

71
00:05:03,720 --> 00:05:05,015
This is one possible use case.

72
00:05:05,015 --> 00:05:08,318
The communication between the server and the client is unidirectionnal,

73
00:05:08,318 --> 00:05:12,134
i.e. the server is able to talk with the client but not the opposite.

74
00:05:12,134 --> 00:05:16,335
This technology relies on the <i>chunked</i> mode of HTTP,

75
00:05:16,335 --> 00:05:19,602
that allows a server to send a datum piece by piece,

76
00:05:19,602 --> 00:05:22,518
and the TCP connection is kept open.

77
00:05:22,518 --> 00:05:25,510
For more informations, we can read the documentation

78
00:05:25,510 --> 00:05:29,503
which is very detailed on this subject, on the Hoa's website.

79
00:05:29,503 --> 00:05:34,000
<i>Voilà</i>, see you next time!
