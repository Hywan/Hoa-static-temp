1
00:00:13,688 --> 00:00:16,919
Au sommaire de cet awecode aujourd'hui : <i>Hoa\Eventsource</i>.

2
00:00:16,919 --> 00:00:21,884
EventSource, aussi appelée <i>Server-Sent Events</i>, est une technologie standardisé par le W3C.

3
00:00:21,884 --> 00:00:25,225
Elle permet à un serveur HTTP d'envoyer des événements à un client.

4
00:00:25,225 --> 00:00:28,394
On va voir un exemple tout de suite et on explique en même temps.

5
00:00:28,394 --> 00:00:31,820
On va démarrer notre client avec un fichier <i>index.html</i>,

6
00:00:31,820 --> 00:00:34,587
qui va contenir un <i>pre</i> et un <i>script</i>.

7
00:00:34,587 --> 00:00:37,825
Le <i>pre</i> va afficher notre sortie.

8
00:00:37,825 --> 00:00:44,006
Dans le <i>script</i>, on va récupérer notre <i>output</i>, et on va déclarer une nouvelle source d'événements.

9
00:00:44,006 --> 00:00:47,106
Cette source s'appelle <i>Server.php</i>.

10
00:00:47,106 --> 00:00:54,741
Ensuite, à chaque fois que l'on reçoit un événement <i>tick</i>, on affiche sa donnée

11
00:00:54,741 --> 00:00:59,999
dans l'<i>output</i>. Aussi bête que ça.

12
00:00:59,999 --> 00:01:05,657
Étape suivante : on va créer notre serveur <i>Server.php</i>.

13
00:01:05,657 --> 00:01:12,085
Pour ça, on va utiliser la classe <i>Hoa\Eventsource\Server</i>.

14
00:01:12,085 --> 00:01:14,315
Et là on va démarrer une boucle infinie.

15
00:01:14,315 --> 00:01:21,799
On va se positionner sur l'événement <i>tick</i>, et on envoie le temps, toutes les secondes.

16
00:01:21,799 --> 00:01:29,081
Démonstration : je suis dans mon client, et je vois bien, toutes les secondes, le temps arriver.

17
00:01:29,081 --> 00:01:33,289
Ces données là sont envoyées par le serveur.

18
00:01:33,289 --> 00:01:35,739
Ça, c'est assez nouveau comme concept.

19
00:01:35,739 --> 00:01:39,657
Avant, il fallait que le client que demande au serveur s'il y avait un événement pour lui.

20
00:01:39,657 --> 00:01:43,077
Par exemple : « est-ce que j'ai un nouveau message ou pas ? », ce genre de choses.

21
00:01:43,077 --> 00:01:45,700
Alors que là, c'est le serveur qui va le dire au client.

22
00:01:45,700 --> 00:01:47,300
C'est dans l'autre sens.

23
00:01:47,300 --> 00:01:50,500
On gagne énormément en ressources et aussi en complexité.

24
00:01:50,500 --> 00:01:53,771
Par exemple, le serveur est même capable de dire au client :

25
00:01:53,771 --> 00:01:56,987
« reconnecte toi dans 1h, j'aurai des nouveaux événements pour toi ».

26
00:01:56,987 --> 00:02:01,905
Ce genre de choses est très pratique quand on a de longues utilisations d'application Web,

27
00:02:01,905 --> 00:02:04,894
comme par exemple des jeux vidéos.

28
00:02:04,894 --> 00:02:06,661
Maintenant qu'on a un peu illustrer le concept,

29
00:02:06,661 --> 00:02:09,136
on va passer sur un exemple plus amusant.

30
00:02:09,136 --> 00:02:13,918
On va mélanger avec <i>Hoa\File\Watcher</i> qui permet d'écouter le système de fichiers.

31
00:02:13,918 --> 00:02:18,912
Pour ça, on va réécrire complètement <i>Server.php</i>.

32
00:02:22,912 --> 00:02:26,051
On va utiliser, donc, <i>Hoa\File\Watcher</i>.

33
00:02:26,051 --> 00:02:31,327
On dit au <i>watcher</i> de se mettre dans le dossier courant et d'écouter les fichiers CSS.

34
00:02:31,327 --> 00:02:39,924
À chaque fois qu'un fichier CSS sera modifié, il va envoyer un événement au client

35
00:02:39,924 --> 00:02:44,155
en disant : « tel fichier CSS a été modifié ».

36
00:02:44,155 --> 00:02:47,983
On va aussi réécrire notre client : notre <i>index.html</i>.

37
00:02:47,983 --> 00:02:54,522
Tout ce qu'on va faire c'est ajouter un lien, un titre et un petit paragraphe.

38
00:02:54,522 --> 00:03:01,184
Ensuite, on écrit un peu de Javascript pour rafraîchir les feuilles CSS.

39
00:03:01,184 --> 00:03:04,612
On utilise une astuce naïve, assez triviale.

40
00:03:04,612 --> 00:03:08,030
On déclare une nouvelle source d'événement : toujours <i>Server.php</i>.

41
00:03:08,030 --> 00:03:11,394
Cette fois-ci, on n'écoute plus l'événement <i>tick</i>, mais <i>modify</i>.

42
00:03:11,394 --> 00:03:17,857
Ensuite, un petit peu code pour rafraîchir les feuilles CSS :

43
00:03:17,857 --> 00:03:20,961
on force le navigateur à les rafraîchir.

44
00:03:20,961 --> 00:03:24,170
Maintenant on va écrire un peu de CSS !

45
00:03:24,170 --> 00:03:29,589
Je rafraîchis mon navigateur. J'ai bien mon titre et mon paragraphe qui apparaissent.

46
00:03:29,589 --> 00:03:36,784
Je vais éditer les feuilles CSS. Par exemple, dans le <i>body</i>, je change la couleur du texte.

47
00:03:36,784 --> 00:03:38,223
J'enregistre.

48
00:03:38,223 --> 00:03:42,116
Quand j'enregistre, <i>Hoa\File\Watcher</i> détecte qu'un fichier CSS a été modifié,

49
00:03:42,116 --> 00:03:47,750
donc on a événement qui est envoyé depuis <i>Hoa\Eventsource\Server</i> sur le client,

50
00:03:47,750 --> 00:03:52,031
le client reçoit cet événement et dit au navigateur : « rafraîchit les feuilles CSS »,

51
00:03:52,031 --> 00:03:55,885
et on voit le résultat dans le navigateur.

52
00:03:55,885 --> 00:03:59,111
On continue en modifiant la couleur du fond.

53
00:03:59,111 --> 00:04:02,660
La couleur ne plaît pas vraiment… on veut une couleur plus sombre…

54
00:04:02,660 --> 00:04:06,118
encore un peu plus sombre… voilà !

55
00:04:06,118 --> 00:04:09,159
Pareil pour le titre : on aimerait qu'il soit centré,

56
00:04:09,159 --> 00:04:17,526
on aimerait aussi qu'il ait une ombre, de 10px par exemple.

57
00:04:17,526 --> 00:04:21,473
On va prendre une couleur presque au pif.

58
00:04:21,473 --> 00:04:26,767
Ensuite, on va travailler un peu sur notre texte.

59
00:04:26,767 --> 00:04:32,048
C'est une boîte, on va lui mettre une bordure.

60
00:04:32,048 --> 00:04:34,743
La bordure apparaît.

61
00:04:34,743 --> 00:04:39,716
On va lui mettre une marge en haut, ça change bien.

62
00:04:39,716 --> 00:04:42,591
On va lui mettre aussi un petit <i>padding</i>…

63
00:04:42,591 --> 00:04:45,863
ça change bien aussi.

64
00:04:45,863 --> 00:04:48,819
Maintenant on met une marge en haut pour le titre, etc.

65
00:04:48,819 --> 00:04:52,050
C'est assez pratique pour faire de l'édition en temps-réel,

66
00:04:52,050 --> 00:04:54,454
mais c'est <b>un</b> usage parmi d'autres !

67
00:04:54,454 --> 00:04:56,313
C'est vraiment une démonstration.

68
00:04:56,313 --> 00:04:58,310
Voilà, on a bien compris le principe :

69
00:04:58,310 --> 00:05:01,557
on a des feuilles CSS, quand elles sont modifiées, un événement est envoyé sur le client,

70
00:05:01,557 --> 00:05:03,720
le client se met à jour.

71
00:05:03,720 --> 00:05:05,015
C'est une utilisation possible.

72
00:05:05,015 --> 00:05:08,318
La communication entre le serveur et le client est unidirectionnelle,

73
00:05:08,318 --> 00:05:12,134
c'est à dire que le serveur est capable de parler avec le client mais pas l'inverse.

74
00:05:12,134 --> 00:05:16,335
Cette technologie repose sur le mode <i>chunked</i> d'HTTP,

75
00:05:16,335 --> 00:05:19,602
qui permet au serveur d'envoyer une donnée morceau par morceau,

76
00:05:19,602 --> 00:05:22,518
et la connexion TCP reste ouverte.

77
00:05:22,518 --> 00:05:25,510
Pour plus d'informations, vous pouvez aller lire la documentation

78
00:05:25,510 --> 00:05:29,503
qui est assez détaillée sur ce sujet, sur le site de Hoa.

79
00:05:29,503 --> 99:59:59,999
Voilà, à tout bientôt et ciao !

80
99:59:59,999 --> 99:59:59,999

